<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.git</groupId>
    <artifactId>chenbenbuyi</artifactId>
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>
    <name>模块父级</name>
    <modules>
        <module>common</module>
        <module>spring-boot-swagger</module>
        <module>spring-boot-mybatis-plus</module>
        <module>spring-boot-multi-datasource</module>
        <module>spring-boot-logging</module>
        <module>spring-boot-profile</module>
        <module>spring-boot-validation</module>
        <module>spring-boot-docker</module>
        <module>spring-boot-redis</module>
        <module>spring-boot-excel</module>
        <module>spring-boot-web</module>
        <module>spring-boot-dubbo(provider)</module>
        <module>spring-boot-dubbo(consumer)</module>
        <module>spring-boot-cache</module>
        <module><![CDATA[spring-boot-async&mail]]></module>
    </modules>

    <properties>
        <spring.boot.version>2.3.0.RELEASE</spring.boot.version>
        <org.mapstruct.version>1.3.1.Final</org.mapstruct.version>
        <hutool.version>5.0.0</hutool.version>
        <!--解决 Warning:java: 源值1.5已过时, 将在未来所有发行版中删除  告警问题-->
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <mybatis-plus-verion>3.4.0</mybatis-plus-verion>
        <!--编译导包字符集设置-->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <!--避免单继承问题，采用的一种依赖管理方式-->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring.boot.version}</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>
            <!--MyBatis-Plus 集成starter-->
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-boot-starter</artifactId>
                <version>${mybatis-plus-verion}</version>
            </dependency>

            <!--MyBatis-Plus 代码生成器  MyBatis-Plus 从 3.0.3 之后移除了代码生成器与模板引擎的默认依赖，所以这里必须需要手动添加相关依赖-->
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-generator</artifactId>
                <version>${mybatis-plus-verion}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <!--引入一些公共组件供子模块继承，子模块不需要重复引入 ，只按需引入模块需要的依赖-->
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <!-- 几种scope 介绍
                compile 默认， 编译运行
                provided 编译有效，不会打入运行包 如:servlet-api,在tomcat服务器中已经存在了,就不需要打入运行包中
                runtime：编译不需要，在运行期有效，需要导入包中。（接口与实现分离,比如数据库驱动包）
　              test：测试需要。在一般的编译和运行时都不需要，它们只有在测试编译和测试运行阶段可用。
                system:非本地参考引入，存在于系统路径下的jar包。不太常用而且也不推荐
             -->
            <scope>test</scope>
        </dependency>
        <!-- hutool工具库 -->
        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
            <version>${hutool.version}</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <!--插件也是可以继承给子模块的，所以子模块并不需要单独引入插件，也不用指定resources位置，默认就是src/main/resources-->
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring.boot.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <!--把依赖的包都打包到生成的Jar包中-->
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.19.1</version>
                <configuration>
                    <!--关掉单元测试 -->
                    <skipTests>true</skipTests>
                </configuration>
            </plugin>
        </plugins>

    </build>

</project>