<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>chenbenbuyi</artifactId>
        <groupId>com.git</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>
    <artifactId>spring-boot-docker</artifactId>
    <name>Docker打包部署模块</name>
    <build>
        <finalName>docker</finalName>
        <plugins>
            <!--一些较老的教程中使用 docker-maven-plugin 插件，但Spotify官方已经不再推荐使用，代之以 dockerfile-maven-plugin -->
            <!--
                dockerfile-maven-plugin 插件是基于 Dockerfile 文件进行构建 Docker 项目
                该插件将 Docker 镜像的构建过程集成到了 Maven 的构建过程之中，如果使用默认的配置，使用 mvn package 命令就能打包成一个 Docker 镜像，使用 mvn deploy 命令就能推送到 Docker 仓库(需配置仓库地址)。

                重复打包镜像会出现REPOSITORY 和 TAG都为 none的情况，可通过 docker rmi $(docker images -f "dangling=true" -q) 命令删除
                也暂未找到好的解决方式，网上基本的处理方式都是通过命令手动更改，例如：docker tag 镜像id REPOSITORY:TAG（仓库：标签）

                镜像构建完成如果需要将镜像推送到仓库，需要配置仓库的地址和认证信息，参考：https://zhuanlan.zhihu.com/p/90122357
            -->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>dockerfile-maven-plugin</artifactId>
                <version>1.4.13</version>
                <executions>
                    <execution>
                        <id>default</id>
                        <goals>
                            <!--
                                另外，可以在execution中同时指定build和push目标。当运行mvn package时，会自动执行build目标(可直接执行 mvn dockerfile:build 构建镜像)，构建Docker镜像。
                                当运行mvn deploy命令时，会自动执行push目标，将Docker镜像push到Docker仓库。
                            -->
                            <goal>build</goal>
                            <goal>push</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <username>admin</username>
                    <password>123456</password>
                    <!--repository 节点指定镜像仓库名字-->
                    <repository>${docker-repository}${project.artifactId}</repository>
                    <!--尝试移动Dockerfile文件，路径会自己跟着改变-->
                    <dockerfile>Dockerfile</dockerfile>
                    <!--镜像版本信息-->
                    <tag>${project.version}</tag>
                    <!--
                        buildArgs可以指定一个或多个变量，传递给Dockerfile，在Dockerfile中通过ARG指令进行引用。
                        这些参数在执行 docker build 的时候会消费
                    -->
                    <buildArgs>
                        <JAR_FILE>${project.build.finalName}.jar</JAR_FILE>
                    </buildArgs>
                    <pullNewerImage>false</pullNewerImage>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>