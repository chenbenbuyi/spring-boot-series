<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>chenbenbuyi</artifactId>
        <groupId>com.git</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>spring-boot-docker</artifactId>
    <name>Docker打包部署模块</name>

    <properties>
        <docker.image.prefix>buyi</docker.image.prefix>
    </properties>
    <build>
        <finalName>docker</finalName>
        <plugins>
            <!--一些较老的教程中使用 docker-maven-plugin 插件，但Spotify官方也不再推荐使用，代之以 dockerfile-maven-plugin -->
            <!--
                dockerfile-maven-plugin 插件是基于 Dockerfile 文件进行构建 Docker 项目
                该插件将 Docker 镜像的构建过程集成到了 Maven 的构建过程之中，如果使用默认的配置，使用 mvn package 命令就能打包成一个 Docker 镜像，使用 mvn deploy 命令就能推送到 Docker 仓库。
            -->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>dockerfile-maven-plugin</artifactId>
                <version>1.4.13</version>
                <executions>
                    <execution>
                        <id>default</id>
                        <goals>
                            <goal>build</goal>
                            <!--<goal>push</goal>-->
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <dockerfile>D:\WorkSpace\spring-boot-series\spring-boot-docker\Dockerfile</dockerfile>
                    <!--镜像版本信息-->
                    <tag>${project.version}</tag>
                    <buildArgs>
                        <!--buildArgs是在docker构建镜像过程中的参数，在Dockerfile中可以使用此参数，此参数在执行 docker build 的时候会消费-->
                        <JAR_FILE>${project.build.finalName}.jar</JAR_FILE>
                    </buildArgs>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <!-- 指定 main 方法类为全局的唯一入口 -->
                    <mainClass>cnblogs.chenbenbuyi.DockerApplication</mainClass>
                    <layout>ZIP</layout>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <!--把依赖的包都打包到生成的Jar包中-->
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>